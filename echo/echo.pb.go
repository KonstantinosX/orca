// Code generated by protoc-gen-go.
// source: echo.proto
// DO NOT EDIT!

/*
Package echo is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	Time
	Location
	Device
	EchoRequest
	EchoReply
*/
package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Time preserves nanosecond latency measurements by using a custom time
// struct which should include either seconds or nanoseconds since the Unix
// epoch as unsigned int64. In Go, use time.Unix to parse this field.
type Time struct {
	Seconds     int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanoseconds int64 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Location describes the results of an GeoIP query
type Location struct {
	Ipaddr       string  `protobuf:"bytes,1,opt,name=ipaddr" json:"ipaddr,omitempty"`
	Latitude     float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
	Longitude    float64 `protobuf:"fixed64,3,opt,name=longitude" json:"longitude,omitempty"`
	City         string  `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Postal       string  `protobuf:"bytes,5,opt,name=postal" json:"postal,omitempty"`
	Country      string  `protobuf:"bytes,6,opt,name=country" json:"country,omitempty"`
	Organization string  `protobuf:"bytes,7,opt,name=organization" json:"organization,omitempty"`
	Domain       string  `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Device describes an sender or a receiver on the network.
type Device struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ipaddr   string    `protobuf:"bytes,2,opt,name=ipaddr" json:"ipaddr,omitempty"`
	Domain   string    `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Location *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Device) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// EchoRequest is used to measure latency and uptime.
type EchoRequest struct {
	Sequence int64   `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Sender   *Device `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Sent     *Time   `protobuf:"bytes,3,opt,name=sent" json:"sent,omitempty"`
	Ttl      int64   `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	Payload  []byte  `protobuf:"bytes,15,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EchoRequest) GetSender() *Device {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *EchoRequest) GetSent() *Time {
	if m != nil {
		return m.Sent
	}
	return nil
}

// EchoReply is used to respond to EchoRequest messages.
type EchoReply struct {
	Sequence int64        `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Receiver *Device      `protobuf:"bytes,2,opt,name=receiver" json:"receiver,omitempty"`
	Received *Time        `protobuf:"bytes,3,opt,name=received" json:"received,omitempty"`
	Echo     *EchoRequest `protobuf:"bytes,4,opt,name=echo" json:"echo,omitempty"`
}

func (m *EchoReply) Reset()                    { *m = EchoReply{} }
func (m *EchoReply) String() string            { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()               {}
func (*EchoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EchoReply) GetReceiver() *Device {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *EchoReply) GetReceived() *Time {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *EchoReply) GetEcho() *EchoRequest {
	if m != nil {
		return m.Echo
	}
	return nil
}

func init() {
	proto.RegisterType((*Time)(nil), "echo.Time")
	proto.RegisterType((*Location)(nil), "echo.Location")
	proto.RegisterType((*Device)(nil), "echo.Device")
	proto.RegisterType((*EchoRequest)(nil), "echo.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "echo.EchoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for EchoService service

type EchoServiceClient interface {
	// Reflect allows nodes to respond to echo requests with echo replies.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := grpc.Invoke(ctx, "/echo.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	// Reflect allows nodes to respond to echo requests with echo replies.
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xcb, 0x8e, 0xd4, 0x30,
	0x10, 0x24, 0x9b, 0x90, 0xcd, 0x74, 0x46, 0x2c, 0xf4, 0x01, 0x59, 0x2b, 0x84, 0x56, 0x11, 0xa0,
	0x15, 0x42, 0x7b, 0x08, 0x47, 0x6e, 0x08, 0x6e, 0x9c, 0x0c, 0x3f, 0x60, 0x6c, 0x6b, 0xb0, 0x94,
	0xb1, 0x43, 0xe2, 0x19, 0x11, 0x7e, 0x85, 0x0b, 0x5f, 0xc6, 0xb7, 0x10, 0xb7, 0x93, 0x4c, 0x46,
	0x3c, 0x6e, 0x5d, 0x5d, 0xad, 0x4a, 0x75, 0xb5, 0x03, 0xa0, 0xe5, 0x17, 0x77, 0xd7, 0x76, 0xce,
	0x3b, 0xcc, 0x42, 0x5d, 0xbd, 0x85, 0xec, 0x93, 0xd9, 0x6b, 0x64, 0x70, 0xd9, 0x6b, 0xe9, 0xac,
	0xea, 0x59, 0x72, 0x93, 0xdc, 0xa6, 0x7c, 0x86, 0x78, 0x03, 0xa5, 0x15, 0xd6, 0xcd, 0xec, 0x05,
	0xb1, 0xeb, 0x56, 0xf5, 0x2b, 0x81, 0xe2, 0x83, 0x93, 0xc2, 0x1b, 0x67, 0xf1, 0x31, 0xe4, 0xa6,
	0x15, 0x4a, 0x75, 0xa4, 0xb3, 0xe1, 0x13, 0xc2, 0x6b, 0x28, 0x9a, 0x71, 0xc2, 0x1f, 0x94, 0x26,
	0x8d, 0x84, 0x2f, 0x18, 0x9f, 0xc0, 0xa6, 0x71, 0x76, 0x17, 0xc9, 0x94, 0xc8, 0x53, 0x03, 0x11,
	0x32, 0x69, 0xfc, 0xc0, 0x32, 0xd2, 0xa3, 0x3a, 0x7c, 0xa5, 0x75, 0xbd, 0x17, 0x0d, 0xbb, 0x1f,
	0xbf, 0x12, 0x51, 0x58, 0x43, 0xba, 0x83, 0xf5, 0xdd, 0xc0, 0x72, 0x22, 0x66, 0x88, 0x15, 0x6c,
	0x5d, 0xb7, 0x13, 0xd6, 0x7c, 0x27, 0x9f, 0xec, 0x92, 0xe8, 0xb3, 0x5e, 0x50, 0x55, 0x6e, 0x2f,
	0x8c, 0x65, 0x45, 0x54, 0x8d, 0xa8, 0xfa, 0x06, 0xf9, 0x3b, 0x7d, 0x34, 0x92, 0xbc, 0x58, 0xb1,
	0xd7, 0xd3, 0x6e, 0x54, 0xaf, 0x36, 0xbe, 0x38, 0xdb, 0xf8, 0xa4, 0x96, 0xae, 0xd5, 0xf0, 0xe5,
	0x98, 0xc4, 0x94, 0x16, 0xed, 0x54, 0xd6, 0x0f, 0xee, 0xe8, 0x2e, 0x73, 0x86, 0x7c, 0xe1, 0xab,
	0x1f, 0x09, 0x94, 0xef, 0x47, 0x8e, 0xeb, 0xaf, 0x07, 0xdd, 0xfb, 0x90, 0x62, 0x1f, 0x4a, 0x2b,
	0xf5, 0x74, 0xa7, 0x05, 0xe3, 0x33, 0xc8, 0x7b, 0x6d, 0x95, 0x8e, 0x3e, 0xca, 0x7a, 0x1b, 0x55,
	0xa3, 0x73, 0x3e, 0x71, 0xf8, 0x14, 0xb2, 0xb1, 0xf2, 0xe4, 0xa9, 0xac, 0x21, 0xce, 0x84, 0x27,
	0xc0, 0xa9, 0x8f, 0x0f, 0x21, 0xf5, 0xbe, 0x21, 0x63, 0x29, 0x0f, 0x65, 0xc8, 0xb4, 0x15, 0x43,
	0xe3, 0x84, 0x62, 0x57, 0x63, 0x77, 0xcb, 0x67, 0x58, 0xfd, 0x4c, 0x60, 0x13, 0xdd, 0xb5, 0xcd,
	0xf0, 0x5f, 0x6f, 0xb7, 0x50, 0x74, 0x5a, 0x6a, 0x73, 0xfc, 0x87, 0xbb, 0x85, 0xc5, 0x17, 0xcb,
	0xa4, 0xfa, 0x8b, 0xc7, 0x85, 0xc3, 0xe7, 0x40, 0x0f, 0x78, 0x4a, 0xf0, 0x51, 0x9c, 0x59, 0x45,
	0xc5, 0x89, 0xae, 0xdf, 0xc4, 0xfc, 0x3e, 0xea, 0x8e, 0xee, 0xf7, 0x0a, 0xb2, 0x00, 0xf1, 0xcf,
	0xf9, 0xeb, 0xab, 0x75, 0x6b, 0xdc, 0xa7, 0xba, 0xf7, 0x39, 0xa7, 0x3f, 0xe5, 0xf5, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0x1f, 0x0d, 0x92, 0x37, 0x03, 0x00, 0x00,
}
