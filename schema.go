// Code generated by go-bindata.
// sources:
// fixtures/schema.sql
// DO NOT EDIT!

package orca

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\xdf\x6f\xda\x30\x10\x7e\xcf\x5f\x71\xca\x53\x5b\xad\x14\xb6\xaa\x0f\x74\x9a\x46\xa9\xa9\xac\x41\xe8\x82\x91\xda\xa7\x62\x6c\x17\x3c\x05\x3b\xb5\x9d\x4a\xec\xaf\x9f\xf3\x0b\x42\x59\xa7\x4e\x62\xd5\x22\x21\xa1\xf3\x77\xbe\xfb\xee\x3b\xdf\x9d\x9d\x9c\x04\x70\x02\xda\x30\xfa\x60\xd9\x52\xac\x68\xcb\x3e\x25\xb9\xa9\xaf\xd3\xb5\x91\x8b\xa5\x83\x8f\xed\xce\x05\x4c\x95\x7c\x16\xc6\x4a\xb7\x06\xfd\x08\x23\x6a\xd6\x09\x55\xdc\x03\x73\x6c\x2f\x73\x4b\x6d\xba\x00\x57\x42\xfd\xa0\x2b\xa9\xf2\x3f\x8b\x47\x6d\x1c\x7c\x9e\x57\xa6\xaf\xf3\xca\xd4\x62\x7a\xf5\xa5\x88\x60\x04\x75\x82\x77\x61\x60\x24\x8c\x99\x83\xce\x39\x74\x2e\xba\x9d\x4e\xf7\x53\xbb\x0c\x7a\xda\x3e\x6f\xb7\x3d\xf4\x2c\x08\x4e\x0f\xf5\xf9\x9b\x00\x29\x9b\x19\x01\xce\x50\x65\x29\x73\x52\x2b\xb0\x82\x65\x26\x67\x37\x5f\x43\x9a\x50\x26\xd5\x02\x68\x92\x40\x3f\x46\x3d\x82\xc0\x73\x85\xde\x90\xa0\x18\xac\xf3\x49\xaf\x84\x72\x36\xbf\x49\x2a\x2b\xb9\xc8\x4b\x32\xbb\x42\x37\x38\x9a\x15\xc8\x59\x7f\x3c\x1a\x61\x32\x6b\x80\x5b\x07\x64\x10\x14\xa1\x2e\x83\xa0\x52\xaf\x4e\x12\x45\x04\x93\x7b\x20\xbd\xab\x21\x9a\xfc\x83\xb2\x71\xf1\x2c\x99\xb0\x40\xe8\x3c\x11\x87\xe4\xe3\xef\xbe\x8e\xc7\xb7\x65\xe6\x80\x07\x80\xee\xf0\x84\x4c\x20\xac\x22\x86\x9e\x6b\xc5\xb1\x84\x6c\x0e\x82\xa3\x00\xfc\x17\x4a\x1e\x02\x8e\x08\xba\xf1\x0a\xdd\xc6\x78\xd4\x8b\xef\xe1\x1b\xba\xff\x50\x9e\x2a\xba\x12\x21\x10\x74\x47\x20\x1a\xfb\xdf\x74\x38\x84\x69\x84\xbf\x4f\x51\x05\x90\x29\xe5\xdc\x94\x90\xca\xc4\xf5\x8a\x4a\xb5\x63\x62\x65\xc3\x86\x70\xed\x33\x21\x78\x54\x7b\x67\x29\xdf\xb5\x07\xc7\x97\x07\x2e\x7d\xa2\x19\xcd\xfb\xf4\x3d\x8b\xbf\x89\xb9\x5f\xfe\xed\xd1\xdb\x04\x68\xd6\xf7\x15\x09\x12\x7f\xa1\xcb\xb8\xd7\xc9\x47\x1a\xd6\x46\xad\x16\xfb\x56\xe6\xdf\xe9\x8e\x30\xa9\xb6\x8e\x69\x2e\x76\xd5\xd2\x99\x72\x66\x17\xa8\xcd\x82\x2a\xf9\xb3\xc8\x3d\xfc\x2f\x85\x4e\xfd\xe0\x79\x4f\x91\x8b\x78\xfb\x02\x97\xe6\xb7\x89\x6b\x75\x66\x98\x78\x68\x82\x6a\x89\x2b\x84\xa3\x66\x21\xdc\x9f\x10\x75\x43\x35\x31\xd5\x91\x11\x4f\x99\xb0\xee\x55\x57\x23\x6c\xea\x3b\x51\xbc\xf4\xb3\x7e\xec\x6e\x95\xda\xf7\x62\xcf\x2f\xf5\x1d\x8c\x63\x84\x6f\xa2\x9c\x1a\x1c\x35\x68\x1d\xfb\xe6\x1b\xa0\x18\x45\x7d\x34\xa9\x87\xe0\x51\x5e\x94\xe3\xdf\xf9\x6d\xc9\xfe\x9d\x5f\xb3\x04\x3b\x9e\x9b\xc7\x56\xfa\x16\x3d\x07\xc5\xe8\x6f\xcc\x7e\x1c\x5d\xe3\x3e\xce\xc7\x7e\x31\xf7\xa1\xdc\x40\x39\xf2\x70\x5d\xe4\xaf\x82\x48\xd7\x11\xb5\xd9\xdb\x88\x60\x97\x3a\x4b\x38\xcc\xfd\x46\xcc\x5c\xbd\x19\xdd\x52\x6c\x36\x62\xeb\x90\xf9\xfc\x0a\x00\x00\xff\xff\x69\x85\x16\x6c\xbd\x08\x00\x00")

func fixturesSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaSql,
		"fixtures/schema.sql",
	)
}

func fixturesSchemaSql() (*asset, error) {
	bytes, err := fixturesSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.sql", size: 2237, mode: os.FileMode(420), modTime: time.Unix(1476477992, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.sql": fixturesSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.sql": &bintree{fixturesSchemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
