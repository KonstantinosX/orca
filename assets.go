// Code generated by go-bindata.
// sources:
// fixtures/schema.sql
// DO NOT EDIT!

package orca

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x5d\x6f\xda\x3c\x14\xbe\xcf\xaf\x38\xca\x55\x5b\xbd\xa5\xf0\xae\xea\x05\x9d\xa6\x51\x30\x95\x35\x08\x5d\x30\x52\x7b\x55\x8c\xe3\x82\xa7\x60\xa7\xb6\x53\x89\xfd\xfa\xd9\xf9\x80\x30\xd6\xa9\x93\x58\x17\x09\x09\x3d\x7e\xce\xe7\x73\xec\x73\x71\x76\x16\xc0\x19\x28\xcd\xe8\xa3\x61\x2b\xbe\xa6\x2d\xf3\x9c\x7a\xa8\xaf\xb2\x8d\x16\xcb\x95\x85\xff\xdb\x9d\x2b\x98\x49\xf1\xc2\xb5\x11\x76\x03\xea\x09\xc6\x54\x6f\x52\x2a\x13\x47\xf4\xdc\x5e\x6e\x57\x4a\x77\x01\x6e\xb8\xfc\x46\xd7\x42\xfa\x3f\xcb\x27\xa5\x2d\x7c\x5c\x54\xd0\xe7\x45\x05\xb5\x98\x5a\x7f\x2a\x22\x68\x4e\x2d\x4f\xba\x30\xd4\x02\x26\xcc\x42\xe7\x12\x3a\x57\xdd\x4e\xa7\xfb\xa1\x5d\x06\x3d\x6f\x5f\xb6\xdb\x8e\x7a\x11\x04\xe7\xc7\xfa\x9c\x27\x40\xd2\xe4\x9a\x83\xd5\x54\x1a\xca\xac\x50\x12\x0c\x67\xb9\xf6\xd5\x2d\x36\x90\xa5\x94\x09\xb9\x04\x9a\xa6\xd0\x8f\x51\x8f\x20\x70\xb5\x42\x6f\x44\x50\x0c\xc6\xba\xa4\xd7\x5c\x5a\xe3\x3d\x09\x69\x44\xc2\x7d\x4b\xe6\x37\xe8\x16\x47\xf3\x82\x39\xef\x4f\xc6\x63\x4c\xe6\x0d\x72\xeb\x88\x15\x04\x45\xa8\xeb\x20\xa8\xd4\xab\x93\x44\x11\xc1\xe4\x01\x48\xef\x66\x84\xa6\x7f\xa1\x6d\x09\x7f\x11\x8c\x1b\x20\x74\x91\xf2\x63\xd6\xe3\x7c\x0f\xe2\xc9\x5d\x99\x39\xe0\x21\xa0\x7b\x3c\x25\x53\x08\xab\x88\xa1\xab\xb5\xaa\xb1\xa4\x6c\x0f\x82\x93\x00\xdc\x17\x8a\x24\x04\x1c\x11\x74\xeb\x14\xba\x8b\xf1\xb8\x17\x3f\xc0\x17\xf4\xf0\x5f\x79\x2a\xe9\x9a\x87\x40\xd0\x3d\x81\x68\xe2\x7e\xb3\xd1\x08\x66\x11\xfe\x3a\x43\x15\x41\x64\x34\x49\x74\x49\xa9\xa0\x44\xad\xa9\x90\x7b\x90\xe1\xcf\x39\x97\x8c\xef\x42\x0d\xd0\xb0\x37\x1b\x11\x68\x57\x0c\x56\x8e\x74\x08\x03\x97\x2b\xc1\xe3\xda\x7f\x9e\x25\xfb\x78\x70\x7a\x7d\x64\x71\x52\xc5\xa8\x9f\xe4\xf7\x94\x67\x1b\xf3\x50\xa0\xdd\xd1\xdb\x24\x6a\x2a\xf0\x8a\x48\xa9\x73\x68\xf3\xc4\xb5\xdf\x45\x1a\xd5\xa0\x92\xcb\x43\x94\xb9\x9b\xbc\x27\x5d\xa6\x8c\x65\x2a\xe1\x7b\x20\x53\xb9\xb4\x7a\x9f\xa8\xf4\x92\x4a\xf1\xbd\xc8\x3d\x7c\x7d\x14\xfe\xa1\xd0\x99\x7b\x9a\xde\x53\xe4\x22\xde\xa1\xc0\x25\xfc\x36\x71\x8d\xca\x35\xe3\x8f\x4d\x52\x2d\x71\xc5\xb0\x54\x2f\xb9\xfd\x1d\xa3\x1e\xa8\x26\xa7\x3a\xd2\xfe\x5e\x1a\xfb\xaa\xa9\xe6\x26\x73\x93\xc8\x7f\xb6\x33\xee\x61\xde\x29\x75\x68\xc5\x5e\x0e\xf4\x75\x33\xe8\x5e\x80\x4d\x73\xd8\x86\x93\x18\xe1\xdb\xc8\x97\x0b\x27\x8d\x52\x4f\x1d\x67\x88\x62\x14\xf5\xd1\xb4\x7e\x3a\x4f\x7c\xa3\x4e\x7f\x65\xb7\x6b\xc0\x9f\xd9\x35\xdb\xb2\x67\xb9\xbd\x80\xa5\x6d\x31\x87\x50\x2c\x8c\xc6\xc6\xc0\xd1\x00\xf7\xb1\x5f\x16\xc5\xb6\x80\x72\x6f\x79\xe6\xf1\x26\xcb\xb9\x82\x48\xd5\x11\x95\x3e\xd8\xa3\x60\x56\x2a\x4f\x13\x58\xb8\x3d\x9a\xdb\x7a\x9f\xda\x15\xdf\xee\xd1\xd6\x31\xf3\xf9\x11\x00\x00\xff\xff\x3a\x36\xdd\x0a\xf3\x08\x00\x00")

func fixturesSchemaSQLBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaSQL,
		"fixtures/schema.sql",
	)
}

func fixturesSchemaSQL() (*asset, error) {
	bytes, err := fixturesSchemaSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.sql", size: 2291, mode: os.FileMode(420), modTime: time.Unix(1476840101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.sql": fixturesSchemaSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.sql": &bintree{fixturesSchemaSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
