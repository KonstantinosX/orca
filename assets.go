// Code generated by go-bindata.
// sources:
// fixtures/schema.sql
// DO NOT EDIT!

package orca

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fixturesSchemaSQL = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x55\x5d\x6f\xda\x30\x14\x7d\xcf\xaf\xb8\xca\x53\x5b\xad\x14\xb6\xaa\x0f\x74\x9a\x46\xc1\x54\xd6\x20\x74\xc1\x48\xed\x53\x31\x8e\x0b\x9e\x82\x9d\xda\x4e\x25\xf6\xeb\xe7\x7c\x41\x28\x63\xea\xa4\xac\x8b\x84\x84\x8e\xcf\xfd\x3c\xd7\xbe\x17\x67\x67\x1e\x9c\x81\xd2\x8c\x3e\x1a\xb6\xe2\x6b\xda\x32\xcf\x71\x06\xf5\x55\xb2\xd1\x62\xb9\xb2\xf0\xb1\xdd\xb9\x82\x99\x14\x2f\x5c\x1b\x61\x37\xa0\x9e\x60\x4c\xf5\x26\xa6\x32\x72\xc4\x8c\xdb\x4b\xed\x4a\xe9\x2e\xc0\x0d\x97\x3f\xe8\x5a\xc8\xec\xcf\xf2\x49\x69\x0b\x9f\x17\x25\xf4\x75\x51\x42\x2d\xa6\xd6\x5f\xf2\x08\x9a\x53\xcb\xa3\x2e\x0c\xb5\x80\x09\xb3\xd0\xb9\x84\xce\x55\xb7\xd3\xe9\x7e\x6a\x17\x41\xcf\xdb\x97\xed\xb6\xa3\x5e\x78\xde\x79\x53\x9f\xf3\x04\x48\x9a\x54\x73\xb0\x9a\x4a\x43\x99\x15\x4a\x82\xe1\x2c\xd5\x59\x75\x8b\x0d\x24\x31\x65\x42\x2e\x81\xc6\x31\xf4\x43\xd4\x23\x08\x5c\xad\xd0\x1b\x11\x14\x82\xb1\x2e\xe9\x35\x97\xd6\x64\x9e\x84\x34\x22\xe2\x59\x4b\xe6\x37\xe8\x16\x07\xf3\x9c\x39\xef\x4f\xc6\x63\x4c\xe6\x35\x72\xab\xc1\x0a\xbc\x3c\xd4\xb5\xe7\x95\xea\x55\x49\xa2\x80\x60\xf2\x00\xa4\x77\x33\x42\xd3\x7f\xd0\xb6\x88\xbf\x08\xc6\x0d\x10\xba\x88\x79\x93\xf5\x38\xdf\x83\x70\x72\x57\x64\x0e\x78\x08\xe8\x1e\x4f\xc9\x14\xfc\x32\xa2\xef\x6a\x2d\x6b\x2c\x28\xdb\x03\xef\xc4\x03\xf7\xf9\x22\xf2\x01\x07\x04\xdd\x3a\x85\xee\x42\x3c\xee\x85\x0f\xf0\x0d\x3d\x7c\x28\x4e\x25\x5d\x73\x1f\x08\xba\x27\x10\x4c\xdc\x6f\x36\x1a\xc1\x2c\xc0\xdf\x67\xa8\x24\x88\x84\x46\x91\x2e\x28\x25\x14\xa9\x35\x15\x72\x0f\x32\xfc\x39\xe5\x92\xf1\x5d\xa8\x01\x1a\xf6\x66\x23\x02\xed\x92\xc1\x8a\x91\xf6\x61\xe0\x72\x25\x78\x5c\xf9\x4f\x93\x68\x1f\xf7\x4e\xaf\x1b\x16\x27\x56\x8c\x66\x93\xfc\x9e\xf2\x6c\x63\x1e\x0a\xb4\x3b\x7a\x9b\x44\x75\x05\x8e\x88\x14\x3b\x87\x36\x8d\x5c\xfb\x5d\xa4\x51\x05\x2a\xb9\x3c\x44\x99\xbb\xc9\x7b\xd2\x25\xca\x58\xa6\x22\xbe\x07\x32\x95\x4a\xab\xf7\x89\x4a\x2f\xa9\x14\x3f\xf3\xdc\xfd\xe3\xa3\x20\x95\x7d\xe5\xeb\xff\x29\x9f\xb8\xb7\xea\x3d\x55\xcf\xe3\x1d\x2a\x5e\xc0\x6f\x53\xdb\xa8\x54\x33\xfe\x58\x27\x55\x9a\x97\x0c\x4b\xf5\x92\xdb\x3f\x31\xaa\x09\xab\x73\xca\x23\x9d\x5d\x54\x63\x8f\x9a\x6a\x6e\x12\x37\x9a\xfc\xb5\x9d\x71\x2f\xf5\x4e\xa9\x43\x2b\xf6\x72\xa0\xaf\x1b\x4a\xf7\x24\x6c\xea\xd3\x37\x9c\x84\x08\xdf\x06\x59\xb9\x70\x52\x2b\xf5\xd4\x71\x86\x28\x44\x41\x1f\x4d\xab\xb7\xf4\x24\x6b\xd4\xe9\xef\xec\x76\x0d\xf8\x3b\xbb\x7a\x5b\xf6\x2c\xb7\x37\xb2\xb0\xcd\xe7\x10\xf2\x0d\x52\x5b\x21\x38\x18\xe0\x3e\xce\xb6\x47\xbe\x3e\xa0\x58\x64\x19\xb3\xb9\xc9\x72\xae\x20\x50\x55\x44\xa5\x0f\x16\x2b\x98\x95\x4a\xe3\x08\x16\x6e\xb1\xa6\xb6\x5a\xb0\x76\xc5\xb7\x8b\xb5\xd5\x64\x3e\xbf\x02\x00\x00\xff\xff\xb8\xd9\xff\x5d\x04\x09\x00\x00")

func fixturesSchemaSQLBytes() ([]byte, error) {
	return bindataRead(
		_fixturesSchemaSQL,
		"fixtures/schema.sql",
	)
}

func fixturesSchemaSQL() (*asset, error) {
	bytes, err := fixturesSchemaSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fixtures/schema.sql", size: 2308, mode: os.FileMode(420), modTime: time.Unix(1476892086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fixtures/schema.sql": fixturesSchemaSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fixtures": &bintree{nil, map[string]*bintree{
		"schema.sql": &bintree{fixturesSchemaSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
